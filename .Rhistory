devtools::use_build_ignore("included")
?use_build_ignore
devtools::use_build_ignore("included")
devtools::use_build_ignore("./included")
use_build_ignore("./included")
library(testthat)
use_build_ignore("./included")
help(package="usethis")
library(usethis)
use_build_ignore("./included")
.libPaths()
lapply(.libPaths(), dir)
?load_all()
use_build_ignore("./test_workflow.R")
use_build_ignore("./testing")
devtools::load_all(".")
devtools::load_all(".")
library(conumee)
library(tidyverse)
library(stringr)
library(ChAMP)
library(tidyverse)
library(minfi)
library(randomForest)
library(gridExtra)
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
upload %>% get_cases()
system.time(test_case <- ClassificationCase$new(basename = basenames[1],
path = input_dir,
verbose = TRUE))
basenames <- upload %>% get_cases()
system.time(test_case <- ClassificationCase$new(basename = basenames[1],
path = input_dir,
verbose = TRUE))
system.time(
test_case <- ClassificationCase$new(basenames[1], input_dir)
)
system.time(
test_case$run_workflow(rf_object = model, verbose = TRUE)
)
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# prepare input -----
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
basenames <- upload %>% get_cases()
# process test case -----
system.time(
test_case <- ClassificationCase$new(basenames[1], input_dir)
)
system.time(
test_case$run_workflow(rf_object = model, verbose = TRUE)
)
librar(rmarkdown)
library(rmarkdown)
library(rmarkdown)
test_case$basename
render_report <- function(case, template, out_dir, out_file = NULL){
# store case object new environment (necessary to pass data to render())
report_env <- new.env()
assign(x = "case", value = case$clone(), envir = report_env)
# use basename if file name is not specified
if (is.null(out_file)) {
out_file <- paste0(case$basename, ".pdf")
}
# render report
rmarkdown::render(input = template,
output_dir = out_dir,
output_file = out_file,
envir = report_env)
}
render_report(case = test_case,
template = "./Data/netid_report.Rmd",
out_dir = "./testing/")
system.time(
test_case <- ClassificationCase$new(basenames[2], input_dir)
)
system.time(
test_case$run_workflow(rf_object = model, verbose = TRUE)
)
render_report(case = test_case,
template = "./Data/netid_report.Rmd",
out_dir = "./testing/")
rm(list = ls())
devtools::load_all(".")
library(conumee)
library(tidyverse)
library(stringr)
library(minfi)
library(randomForest)
library(gridExtra)
library(grid)
library(rmarkdown)
# to do list -----
# TODO: choice of preprocessing function
# TODO: choice of imputation function
# TODO: Conumee detail plot
# prepare input -----
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
basenames <- upload %>% get_cases()
# process test case -----
system.time(
test_case <- ClassificationCase$new(basenames[2], input_dir)
)
system.time(
test_case$run_workflow(rf_object = model, verbose = TRUE)
)
# prepare report -----
render_report(case = test_case,
template = "./Data/netid_report.Rmd",
out_dir = "./testing/")
render_report(case = test_case,
template = "./Data/netid_report.Rmd",
out_dir = "./testing/",
out_file = "blabla.pdf")
rm(list = ls()
devtools::load_all(".")
print(.libPaths())
print(sessionInfo())
print(version)
versions <- sessionInfo()
versions$locale
versions$running
versions$otherPkgs
sessionInfo()
str(versions)
versions <- print(versions)
versions <- grep(pattern = "conumee", print(versions))
versions <- grep(pattern = "conumee", versions)
grep(pattern = "conumee", versions)
versions <- sessionInfo()
grep(pattern = "conumee", versions)
grep(pattern = "conumee", versions, value = TRUE)
packageVersion("conumee")
packageVersion("tidyverse")
packageVersion("stringr")
packageVersion("minfi")
packageVersion("randomForest")
packageVersion("gridExtra")
packageVersion("grid")
packageVersion("rmarkdown")
devtools::load_all(".")
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
rm(vversion)
rm(version)
rm(versions)
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
devtools::load_all(".")
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
basenames <- upload %>% get_cases()
cases <- lapply(as.list(basenames), FUN = ClassificationCase$new, input_dir)
system.time(lapply(cases, function(x) x$run_workflow(rf_object = model)))
# TODO: choice of preprocessing function
# TODO: choice of imputation function
# TODO: Conumee detail plot
# prepare input -----
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
basenames <- upload %>% get_cases()
# process test case -----
cases <- lapply(as.list(basenames), FUN = ClassificationCase$new, input_dir)
devtools::load_all(".")
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
basenames <- upload %>% get_cases()
# process test case -----
cases <- lapply(as.list(basenames), FUN = ClassificationCase$new, input_dir)
system.time(lapply(cases, function(x) x$run_workflow(rf_object = model)))
devtools::load_all(".")
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
basenames <- upload %>% get_cases()
# process test case -----
cases <- lapply(as.list(basenames), FUN = ClassificationCase$new, input_dir)
system.time(lapply(cases, function(x) x$run_workflow(rf_object = model)))
devtools::load_all(".")
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
basenames <- upload %>% get_cases()
# process test case -----
cases <- lapply(as.list(basenames), FUN = ClassificationCase$new, input_dir)
system.time(lapply(cases, function(x) x$run_workflow(rf_object = model)))
devtools::load_all(".")
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
basenames <- upload %>% get_cases()
# process test case -----
cases <- lapply(as.list(basenames), FUN = ClassificationCase$new, input_dir)
system.time(lapply(cases, function(x) x$run_workflow(rf_object = model)))
devtools::load_all(".")
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
basenames <- upload %>% get_cases()
# process test case -----
cases <- lapply(as.list(basenames), FUN = ClassificationCase$new, input_dir)
system.time(lapply(cases, function(x) x$run_workflow(rf_object = model)))
system.time(lapply(cases, render_report, template = "./Data/netid_report.Rmd", out_dir = "./testing/"))
devtools::load_all(".")
system.time(lapply(cases, render_report, template = "./Data/netid_report.Rmd", out_dir = "./testing/"))
browseVignettes()
browseVignettes()
devtools::load_all(".")
rm(list = ls())
t0 <- Sys.time()
# load Random Forest model
load("./testing/Perfect_RF_Model.rData")
# scan input files
input_dir <- "./testing/test-upload-faulty/"
upload <- scan_directory(upload_dir = input_dir)
basenames <- upload %>% get_cases()
# process cases
cases <- lapply(as.list(basenames), FUN = ClassificationCase$new, input_dir)
lapply(cases, function(x) x$run_workflow(rf_object = model))
lapply(cases, render_report, template = "./Data/netid_report.Rmd", out_dir = "./testing/")
t1 <- Sys.time() - t0
t1
net_id_v1 <- model
save(net_id_v1, file = "./Data/NetID_v1.RData")
devtools::load_all(".")
# load Random Forest model
model <- crystalmeth::net_id_v1
devtools::load_all(".")
devtools::use_data_raw()
use_data_raw()
?devtools::use_data_raw()
?use_data_raw()
usethis::use_data_raw()
setwd("./data-raw/")
?use_data
??use_data
library(usethis)
??use_data
??use_data
?use_data
# Data for normal controls was downloaded from
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE86833
# and contains n = 5 matched samples of cord blood for both platforms
library(minfi)
library(conumee)
# Data for normal controls was downloaded from
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE86833
# and contains n = 5 matched samples of cord blood for both platforms
library(minfi)
library(conumee)
ctrl_dir <- "./data-raw/controls450k/"
ctrl_basenames <- list.files(path = ctrl_dir, pattern = "_Grn.idat")
ctrl_basenames <- stringr::str_remove(ctrl_basenames, "_Grn.idat")
ctrl_raw <- minfi::read.metharray(basenames = file.path(ctrl_dir, ctrl_basenames))
NormalControls450k <- minfi::preprocessIllumina(ctrl_raw)
usethis::use_data(NormalControls450k, overwrite = TRUE)
ctrl_dir <- "./data-raw/controlsEpic/"
ctrl_basenames <- list.files(path = ctrl_dir, pattern = "_Grn.idat")
ctrl_basenames <- stringr::str_remove(ctrl_basenames, "_Grn.idat")
ctrl_raw <- minfi::read.metharray(basenames = file.path(ctrl_dir, ctrl_basenames))
NormalControlsEpic <- minfi::preprocessIllumina(ctrl_raw)
usethis::use_data(NormalControlsEpic, overwrite = TRUE)
ConumeeAnno450k <- conumee::CNV.create_anno(array_type = "450k")
usethis::use_data(ConumeeAnno450k, overwrite = TRUE)
ConumeeAnnoEpic <- conumee::CNV.create_anno(array_type = "EPIC")
usethis::use_data(NormalControlsEpic, overwrite = TRUE)
usethis::use_data(NormalControlsEpic, overwrite = TRUE)
ls()
NormalControls450k
ls()
devtools::load_all(".")
?NormalControlsEpic
devtools::load_all(".")
devtools::load_all(".")
?NormalControlsEpic
??NormalControlsEpic
crystalmeth::NormalControls450k
?crystalmeth::NormalControls450k
??crystalmeth::NormalControls450k
library(crystalmeth)
??NormalControlsEpic
?NormalControlsEpic
?NormalControlsEpic
?NormalControls450k
library(minfi)
library(conumee)
# Annotation for Conumee CNV plots -----
# Illumina 450K platform
ConumeeAnno450k <- conumee::CNV.create_anno(array_type = "450k")
usethis::use_data(ConumeeAnno450k, overwrite = TRUE)
# Illumina EPIC platform
ConumeeAnnoEpic <- conumee::CNV.create_anno(array_type = "EPIC")
usethis::use_data(NormalControlsEpic, overwrite = TRUE)
usethis::use_data(ConumeeAnnoEPIC, overwrite = TRUE)
usethis::use_data(ConumeeAnnoEpic, overwrite = TRUE)
# Illumina EPIC platform
ctrl_dir <- "./data-raw/controlsEpic/"
ctrl_basenames <- list.files(path = ctrl_dir, pattern = "_Grn.idat")
ctrl_basenames <- stringr::str_remove(ctrl_basenames, "_Grn.idat")
ctrl_raw <- minfi::read.metharray(basenames = file.path(ctrl_dir, ctrl_basenames))
NormalControlsEpic <- minfi::preprocessIllumina(ctrl_raw)
usethis::use_data(NormalControlsEpic, overwrite = TRUE)
load("./data/RFpurify_ABSOLUTE.RData")
RFpurify_ABSOLUTE
rm(ctrl_basenames)
rm(ctrl_dir)
rm(ctrl_raw)
rm(NormalControlsEpic)
rm(RFpurify_ABSOLUTE)
ls()
ConumeeAnno450k
devtools::document()
?ConumeeAnnao450k
?ConumeeAnno450k
?
devtools::load_all(".")
# load Random Forest model
load("./temp/NetID_v1.RData")
# scan input files
input_dir <- "./temp/test-upload-faulty/"
upload <- scan_directory(dir = input_dir)
upload
devtools::load_all(".")
?scan_directory
?scan_directory
devtools::document()
devtools::load_all(".")
?scan_directory
devtools::document()
?scan_directory
devtools::document()
?scan_directory
devtools::document()
?scan_directory
devtools::document()
devtools::document()
?scan_directory
devtools::document()
?scan_directory
devtools::document()
devtools::document()
?get_all
devtools::document()
?get_all
devtools::document()
?get_all
devtools::document()
?get_all
devtools::document()
?get_green_only
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?get_red_only
?get_invalid
devtools::document()
?get_cases
?get_basename
upload %>% get_cases
upload %>% get_files
upload %>% get_files()
upload %>% get_all()
devtools::document()
?get_basename
devtools::document()
devtools::document()
?guess_array_type
devtools::document()
?impute_random
devtools::document()
?get_basename
# load Random Forest model
load("./temp/NetID_v1.RData")
# scan input files
input_dir <- "./temp/test-upload-faulty/"
upload <- scan_directory(dir = input_dir)
basenames <- upload %>% get_cases()
basenames
# process cases
case <- ClassificationCase$new(basenames[1], input_dir)
case$run_workflow(rf_object = net_id_v1)
test <- render_report(case, template = "./temp/netid_report.Rmd", out_dir = "./temp/")
test
# load Random Forest model
load("./temp/NetID_v1.RData")
# scan input files
input_dir <- "./temp/test-upload-faulty/"
upload <- scan_directory(dir = input_dir)
basenames <- upload %>% get_cases()
# process cases
case <- ClassificationCase$new(basenames[1], input_dir)
case$run_workflow(rf_object = net_id_v1)
test <- render_report(case, template = "./temp/netid_report.Rmd", out_dir = "./temp/")
devtools::load_all(".")
# load Random Forest model
load("./temp/NetID_v1.RData")
# scan input files
input_dir <- "./temp/test-upload-faulty/"
upload <- scan_directory(dir = input_dir)
basenames <- upload %>% get_cases()
# process cases
case <- ClassificationCase$new(basenames[1], input_dir)
case$run_workflow(rf_object = net_id_v1)
test <- render_report(case, template = "./temp/netid_report.Rmd", out_dir = "./temp/")
