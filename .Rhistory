# Add section headers -----
header_sample <- grid::textGrob(label = "Sample Information & Classification Results",
hjust = 0, vjust = 0, x = 0, y = 0,
gp = gpar(fontsize = 15, col="grey"))
# Arrange elements into plot -----
grid_layout <- rbind(c(1, 1, 1, 1, 1, 1),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3))
gridExtra::grid.arrange(
grobs = list(header_sample,
t1,
plot_purity),
layout_matrix = grid_layout)
ttheme_minimal
# enter data
t1_params <- c("Sentrix ID:", "Platform:", "Imputed data points (%):", "Avg. methylation (%):", "",
"Methylation Class:", "Class Score:", "Tumor Purity ABSOLUTE (%):", "Tumor Purity ESTIMATE (%):")
t1_values <- c(case$array_basename, case$array_platform, imp, avg_beta,
class, score, p_absolute, p_estimate))
t1_data <- data.frame(Parameter = t1_params,
Value = t1_values)
t1_values <- c(case$array_basename, case$array_platform, imp, avg_beta,
class, score, p_absolute, p_estimate)
t1_data <- data.frame(Parameter = t1_params,
Value = t1_values)
t1_data <- data.frame(Parameter = t1_params,
Values = t1_values)
t1_values <- c(case$array_basename, case$array_platform, imp, avg_beta, "",
class, score, p_absolute, p_estimate)
t1_data <- data.frame(Parameter = t1_params,
Values = t1_values)
# create grob
t1 <- tableGrob(t1_data,
theme = t1_theme,
cols = NULL,
rows = NULL)
header_sample <- grid::textGrob(label = "Sample Information & Classification Results",
hjust = 0, vjust = 0, x = 0, y = 0,
gp = gpar(fontsize = 15, col="grey"))
grid_layout <- rbind(c(1, 1, 1, 1, 1, 1),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3))
gridExtra::grid.arrange(
grobs = list(header_sample,
t1,
plot_purity),
layout_matrix = grid_layout)
grid_layout <- rbind(c(1, 1, 1, 1, 1),
c(2, 2, 2, 3, 3),
c(2, 2, 2, 3, 3),
c(2, 2, 2, 3, 3),
c(2, 2, 2, 3, 3),
c(2, 2, 2, 3, 3))
gridExtra::grid.arrange(
grobs = list(header_sample,
t1,
plot_purity),
layout_matrix = grid_layout)
# Calculate additional variables ----
avg_beta <- round(mean(case$data_beta) * 100, digits = 2)
imp <- (case$data_na_n / nrow(case$data_beta) * 100)
imp <- ifelse(imp < 0.01, "< 0.01", imp)
class <- case$class_type_calibrated
score <- round(case$class_votes_calibrated[, class] * 100, digits = 2) %>% unlist %>% unname
p_absolute <- case$purity$purity[1] %>% unname
p_estimate <- case$purity$purity[2] %>% unname
# Table 1: Sample Data ----
# create theme
t1_theme <- ttheme_minimal(core = list(bg_params = list(fill = "white", col = NA),
fg_params = list(fontsize = 10, hjust = 0, x = 0.01)))
# enter data
t1_params <- c("Sentrix ID:", "Platform:", "Imputed data points (%):", "Avg. methylation (%):", "",
"Methylation Class:", "Class Score:", "Tumor Purity ABSOLUTE (%):", "Tumor Purity ESTIMATE (%):")
t1_values <- c(case$array_basename, case$array_platform, imp, avg_beta, "",
class, score, p_absolute, p_estimate)
t1_data <- data.frame(Parameter = t1_params,
Values = t1_values)
# create grob
t1 <- tableGrob(t1_data,
theme = t1_theme,
cols = NULL,
rows = NULL)
# Plot: Tumor purity barplot -----
plot_purity <- case$purity %>%
ggplot2::ggplot(aes(x = method, y = purity, fill = method)) +
ggplot2::geom_bar(stat = "identity", colour = "black") +
ggplot2::lims(y = c(0, 100)) +
ggplot2::labs(x = NULL, y = "Tumor purity (estimated)") +
ggplot2::theme(legend.position = "none")
# Add section headers -----
header_sample <- grid::textGrob(label = "Sample Information & Classification Results",
hjust = 0, vjust = 0, x = 0, y = 0,
gp = gpar(fontsize = 15, col="grey"))
# Arrange elements into plot -----
grid_layout <- rbind(c(1, 1, 1, 1, 1),
c(2, 2, 2, 3, 3),
c(2, 2, 2, 3, 3),
c(2, 2, 2, 3, 3),
c(2, 2, 2, 3, 3),
c(2, 2, 2, 3, 3))
gridExtra::grid.arrange(
grobs = list(header_sample,
t1,
plot_purity),
layout_matrix = grid_layout)
# Calculate additional variables ----
avg_beta <- round(mean(case$data_beta) * 100, digits = 2)
imp <- (case$data_na_n / nrow(case$data_beta) * 100)
imp <- ifelse(imp < 0.01, "< 0.01", imp)
class <- case$class_type_calibrated
score <- round(case$class_votes_calibrated[, class] * 100, digits = 2) %>% unlist %>% unname
p_absolute <- case$purity$purity[1] %>% unname
p_estimate <- case$purity$purity[2] %>% unname
# Table 1: Sample Data ----
# create theme
t1_theme <- ttheme_minimal(core = list(bg_params = list(fill = "white", col = NA),
fg_params = list(fontsize = 10, hjust = 0, x = 0.01)))
# enter data
t1_params <- c("Sentrix ID:", "Platform:", "Imputed data points (%):", "Avg. methylation (%):", "",
"Methylation Class:", "Class Score:", "Tumor Purity ABSOLUTE (%):", "Tumor Purity ESTIMATE (%):")
t1_values <- c(case$array_basename, case$array_platform, imp, avg_beta, "",
class, score, p_absolute, p_estimate)
t1_data <- data.frame(Parameter = t1_params,
Values = t1_values)
# create grob
t1 <- tableGrob(t1_data,
theme = t1_theme,
cols = NULL,
rows = NULL)
# Plot: Tumor purity barplot -----
plot_purity <- case$purity %>%
ggplot2::ggplot(aes(x = method, y = purity, fill = method)) +
ggplot2::geom_bar(stat = "identity", colour = "black") +
ggplot2::lims(y = c(0, 100)) +
ggplot2::labs(x = NULL, y = "Tumor purity (estimated)") +
ggplot2::theme(legend.position = "none")
# Add section headers -----
header_sample <- grid::textGrob(label = "Sample Information & Classification Results",
hjust = 0, vjust = 0, x = 0, y = 0,
gp = gpar(fontsize = 15, col="grey"))
# Arrange elements into plot -----
grid_layout <- rbind(c(1, 1, 1, 1, 1, 1),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3))
gridExtra::grid.arrange(
grobs = list(header_sample,
t1,
plot_purity),
layout_matrix = grid_layout)
grid_layout <- rbind(c(1, 1, 1, 1, 1, 1),
c(1, 1, 1, 1, 1, 1),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3),
c(2, 2, 2, 2, 3, 3))
gridExtra::grid.arrange(
grobs = list(header_sample,
t1,
plot_purity),
layout_matrix = grid_layout)
knitr::opts_chunk$set(echo = TRUE)
library(gridExtra)
library(grid)
library(conumee)
library(tidyverse)
library(ggtern)
case = readRDS("../test_case_incl_calibration.rds")
grid_layout <- rbind(c(1, 1, 1, 1, 2, 2),
c(1, 1, 1, 1, 2, 2),
c(1, 1, 1, 1, 2, 2),
c(1, 1, 1, 1, 2, 2))
gridExtra::grid.arrange(
grobs = list(header_sample,
t1,
plot_purity),
layout_matrix = grid_layout)
gridExtra::grid.arrange(
grobs = list(t1,
plot_purity),
layout_matrix = grid_layout)
# Calculate additional variables ----
avg_beta <- round(mean(case$data_beta) * 100, digits = 2)
knitr::opts_chunk$set(echo = TRUE)
library(gridExtra)
library(grid)
library(conumee)
library(tidyverse)
library(ggtern)
case = readRDS("../test_case_incl_calibration.rds")
knitr::opts_chunk$set(echo = TRUE)
library(gridExtra)
library(grid)
library(conumee)
library(tidyverse)
library(ggtern)
case = readRDS("../test_case_incl_calibration.rds")
avg_beta <- round(mean(case$data_beta) * 100, digits = 2)
imp <- (case$data_na_n / nrow(case$data_beta) * 100)
imp <- ifelse(imp < 0.01, "< 0.01", imp)
class <- case$class_type_calibrated
score <- round(case$class_votes_calibrated[, class] * 100, digits = 2) %>% unlist %>% unname
p_absolute <- case$purity$purity[1] %>% unname
p_estimate <- case$purity$purity[2] %>% unname
# create theme
t1_theme <- ttheme_minimal(core = list(bg_params = list(fill = "white", col = NA),
fg_params = list(fontsize = 10, hjust = 0, x = 0.01)))
# enter data
t1_params <- c("Sentrix ID:", "Platform:", "Imputed data points (%):", "Avg. methylation (%):",
"", "",
"Methylation Class:", "Class Score:", "Tumor Purity ABSOLUTE (%):", "Tumor Purity ESTIMATE (%):")
t1_values <- c(case$array_basename, case$array_platform, imp, avg_beta, "", "",
class, score, p_absolute, p_estimate)
t1_data <- data.frame(Parameter = t1_params,
Values = t1_values)
# create grob
t1 <- tableGrob(t1_data,
theme = t1_theme,
cols = NULL,
rows = NULL)
plot_purity <- case$purity %>%
ggplot2::ggplot(aes(x = method, y = purity, fill = method)) +
ggplot2::geom_bar(stat = "identity", colour = "black") +
ggplot2::lims(y = c(0, 100)) +
ggplot2::labs(x = NULL, y = "Tumor purity (estimated)") +
ggplot2::theme(legend.position = "none")
header_sample <- grid::textGrob(label = "Sample Information & Classification Results",
hjust = 0, vjust = 0, x = 0, y = 0,
gp = gpar(fontsize = 15, col="grey"))
grid_layout <- rbind(c(1, 1, 1, 1, 2, 2),
c(1, 1, 1, 1, 2, 2),
c(1, 1, 1, 1, 2, 2),
c(1, 1, 1, 1, 2, 2))
gridExtra::grid.arrange(
grobs = list(t1,
plot_purity),
layout_matrix = grid_layout)
?tableGrob
render_report
library(tidyverse)
library(crystalmeth)
library(lobstr)
library(future)
library(future.apply)
library(glmnet)
render_report
rm(list = ls())
library(tidyverse)
library(crystalmeth)
library(lobstr)
library(future)
library(future.apply)
library(glmnet)
# TODO
# re-think input format for r6 object (maybe path + base name?)
# do bulky objects need to be part of r6 objects or is referencing possible?
### 1: Setup -----
# load classifier & ridge regression model
load("./temp/test-classifier/finalRF_and_LRseed123tr500llambda.1sea0nf3.rData")
rf_model <- finalRF$RFmodel
ridge_model <- finalLR$Ridgemodel
# scan directory for IDAT files
input_dir <- "./temp/test-idat/test-upload-idat/"
files <- scan_directory(dir = input_dir)
basenames <- files %>% get_cases()
### 2: Step-by-Step processing -----
test_case <- ClassificationCase$new(basename = basenames[1],
path = input_dir,
verbose = TRUE)
# i/o & normalization
test_case$load_data()
test_case$normalize_data()
test_case$get_betas()
test_case$impute_data()
# classification & calibration
test_case$run_classification(rf_object = rf_model, verbose = TRUE)
test_case$calibrate_scores(calibration_model = ridge_model, verbose = TRUE)
# purity & cnv
test_case$estimate_purity(verbose = TRUE)
test_case$prepare_cnv(verbose = TRUE)
ridge_model <- finalLR$Ridgemodel
ridge_model
# classification & calibration
test_case$run_classification(rf_object = rf_model, verbose = TRUE)
test_case$class_type
test_case$class_votes
test_case$class_votes[, , 1]
devtools::load_all(".")
test_case <- ClassificationCase$new(basename = basenames[1],
path = input_dir,
verbose = TRUE)
# i/o & normalization
test_case$load_data()
test_case$normalize_data()
test_case$get_betas()
test_case$impute_data()
# classification & calibration
test_case$run_classification(rf_object = rf_model, verbose = TRUE)
test_case$calibrate_scores(calibration_model = ridge_model, verbose = TRUE)
# purity & cnv
test_case$estimate_purity(verbose = TRUE)
test_case$prepare_cnv(verbose = TRUE)
test_case$array_basename
test_case$array_nprobes
test_case$array_path
test_case$array_platform
test_case$calibrate_scores
test_case$class_type
test_case$class_type_calibrated
test_case$class_votes
test_case$class_votes_calibrated
test_case$data_beta %>% head
test_case$data_na_n
test_case$data_na_probes
test_case$data_norm_method
test_case$data_norm
test_case$data_raw
test_case$error
test_case$error_msg
test_case$purity
# save
saveRDS(object = test_case, file = "./temp/test_case_incl_calibration.rds")
render_report(case = test_case,
template = "./temp/test-template/nen_id_template_html.Rmd",
out_file = "test_v2.html",
out_dir = "./temp/test-reports/")
render_report(case = test_case
out_type = "html",
template = "./temp/test-template/nen_id_template_html.Rmd",
out_file = "test_v2.html",
out_dir = "./temp/test-reports/")
render_report(case = test_case,
out_type = "html",
template = "./temp/test-template/nen_id_template_html.Rmd",
out_file = "test_v2.html",
out_dir = "./temp/test-reports/")
render_report
render_report(case = test_case,
out_type = "html_pretty",
template = "./temp/test-template/nen_id_template_html.Rmd",
out_file = "test_v2.html",
out_dir = "./temp/test-reports/")
render_report
test_env <- new.env()
assign(x = "case", value = test_case$clone(), envir = test_env)
rmarkdown::render(input = "./temp/test-template/nen_id_template_html.Rmd", output_dir = "", envir = test_env)
rmarkdown::render(input = "./temp/test-template/nen_id_template_html.Rmd",
output_dir = "./temp/test-reports/", envir = test_env)
rmarkdown::render(input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = "test_cayman.html",
output_dir = "./temp/test-reports/", envir = test_env)
rmarkdown::render(input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = "test_cayman.html",
output_dir = "./temp/test-reports/", envir = test_env)
rmarkdown::render(input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = "test_tactile.html",
output_dir = "./temp/test-reports/", envir = test_env)
rmarkdown::render(input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = "leonids.html",
output_dir = "./temp/test-reports/", envir = test_env)
rmarkdown::render(input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = "hpstr.html",
output_dir = "./temp/test-reports/", envir = test_env)
test_env <- new.env()
assign(x = "case", value = test_case$clone(), envir = test_env)
rmarkdown::render(input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = "hpstr_2.html",
output_dir = "./temp/test-reports/", envir = test_env)
?rmarkdown::render
devtools::load_all(".")
library(tidyverse)
library(crystalmeth)
library(lobstr)
library(future)
library(future.apply)
library(glmnet)
# TODO
# re-think input format for r6 object (maybe path + base name?)
# do bulky objects need to be part of r6 objects or is referencing possible?
# adjust the render_report
### 1: Setup -----
# load classifier & ridge regression model
load("./temp/test-classifier/finalRF_and_LRseed123tr500llambda.1sea0nf3.rData")
rf_model <- finalRF$RFmodel
ridge_model <- finalLR$Ridgemodel
# scan directory for IDAT files
input_dir <- "./temp/test-idat/test-upload-idat/"
files <- scan_directory(dir = input_dir)
basenames <- files %>% get_cases()
### 2: Step-by-Step processing -----
test_case <- ClassificationCase$new(basename = basenames[1],
path = input_dir,
verbose = TRUE)
# i/o & normalization
test_case$load_data()
test_case$normalize_data()
test_case$get_betas()
test_case$impute_data()
# classification & calibration
test_case$run_classification(rf_object = rf_model, verbose = TRUE)
test_case$calibrate_scores(calibration_model = ridge_model, verbose = TRUE)
# purity & cnv
test_case$estimate_purity(verbose = TRUE)
test_case$prepare_cnv(verbose = TRUE)
?render_report
render_report(case = test_case,
input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = "test_v3.html",
output_dir = "./temp/test-reports/")
### 1: Setup -----
# load classifier & ridge regression model
load("./temp/test-classifier/finalRF_and_LRseed123tr500llambda.1sea0nf3.rData")
rf_model <- finalRF$RFmodel
ridge_model <- finalLR$Ridgemodel
# scan directory for IDAT files
input_dir <- "./temp/test-idat/test-upload-idat/"
files <- scan_directory(dir = input_dir)
basenames <- files %>% get_cases()
rm(lkist = ls())
rm(list = ls())
library(tidyverse)
library(crystalmeth)
library(lobstr)
library(future)
library(future.apply)
library(glmnet)
# TODO
# re-think input format for r6 object (maybe path + base name?)
# do bulky objects need to be part of r6 objects or is referencing possible?
# adjust the render_report
# add gene list for detailed CNV plot
#
### 1: Setup -----
# load classifier & ridge regression model
load("./temp/test-classifier/finalRF_and_LRseed123tr500llambda.1sea0nf3.rData")
rf_model <- finalRF$RFmodel
ridge_model <- finalLR$Ridgemodel
# scan directory for IDAT files
input_dir <- "./temp/test-idat/test-upload-idat/"
files <- scan_directory(dir = input_dir)
basenames <- files %>% get_cases()
devtools::load_all(".")
library(tidyverse)
library(crystalmeth)
library(future)
library(future.apply)
library(glmnet)
# load classifier & ridge regression model
load("./temp/test-classifier/finalRF_and_LRseed123tr500llambda.1sea0nf3.rData")
rf_model <- finalRF$RFmodel
ridge_model <- finalLR$Ridgemodel
# scan directory for IDAT files
input_dir <- "./temp/test-idat/test-upload-idat/"
files <- scan_directory(dir = input_dir)
basenames <- files %>% get_cases()
files
test_case <- ClassificationCase$new(basename = basenames[1],
path = input_dir,
verbose = TRUE)
# i/o & normalization
test_case$load_data()
test_case$normalize_data()
test_case$get_betas()
test_case$impute_data()
# classification & calibration
test_case$run_classification(rf_object = rf_model, verbose = TRUE)
devtools::load_all(".")
# classification & calibration
test_case$run_classification(rf_model = rf_model, verbose = TRUE)
test_case$calibrate_scores(calibration_model = ridge_model, verbose = TRUE)
# purity & cnv
test_case$estimate_purity(verbose = TRUE)
test_case$prepare_cnv(verbose = TRUE)
# render report
render_report(case = test_case,
input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = "test_v4.html",
output_dir = "./temp/test-reports/")
?rmarkdown::render
devtools::load_all(".")
# render report
render_report(case = test_case,
input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = "test_1.html",
output_dir = "./temp/test-reports/")
test_case_2 <- test_case$run_full_workflow(rf_model = rf_model,
calibration_model = ridge_model,
verbose = TRUE)
render_report(case = test_case_2,
input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = "test_2.html",
output_dir = "./temp/test-reports/")
cases <- lapply(as.list(basenames),
function(x){ClassificationCase$new(basename = x, path = input_dir)})
cases <- future_lapply(cases, function(x){x$run_full_workflow(rf_model = rf_model,
calibration_model = ridge_model,
verbose = TRUE)})
paste0(cases[[1]]$array_basename, ".html")
future_lapply(cases, function(x){
render_report(x,
input = "./temp/test-template/nen_id_template_html.Rmd",
output_file = paste0(x$array_basename, ".html"),
output_dir = "./temp/test-reports/")})
