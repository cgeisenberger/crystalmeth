% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ClassificationCase.R
\name{ClassificationCase}
\alias{ClassificationCase}
\title{R6 Class Representing a diagnostic sample}
\description{
ClassificationCase provides a coherent structure to keep all information
of one diagnostic case used for methylation prediction within a single object.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{basename}}{Basename (prefix of IDAT file).}

\item{\code{beta_values}}{Matrix of beta values.}

\item{\code{class_type}}{Predicted class of sample.}

\item{\code{class_votes}}{Matrix of class probabilities.}

\item{\code{cnv}}{Segmented copy number data created by conumee.}

\item{\code{error}}{Boolean, TRUE if error occured during execution
(default: FALSE).}

\item{\code{error_code}}{Contains error code if execution failed
(default: NULL).}

\item{\code{imputed_n}}{Number of imputed data points.}

\item{\code{n_probes}}{Number of raw intensity measurements.
Used to guess array type.}

\item{\code{normalization_method}}{Method used for normalization.}

\item{\code{normalized_data}}{Object of class MethylSet,
generated by minfi's preprocessing functions.}

\item{\code{path}}{Directory containing the input files.}

\item{\code{platform}}{Auto-detected array platform.}

\item{\code{purity}}{List of length 2 with tumor purities estimated
with RF_Purify package.}

\item{\code{raw_data}}{Object of type RGSet containing raw array data
generated with minfi::read.metharray().}

\item{\code{rf}}{Object of type "randomForest". Contains the classifier
object which needs to be supplied while the methods
run_classification() or run_workflow().}

\item{\code{verbose}}{Print informative messages (Boolean, default: TRUE).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ClassificationCase$new()}}
\item \href{#method-validate}{\code{ClassificationCase$validate()}}
\item \href{#method-terminate}{\code{ClassificationCase$terminate()}}
\item \href{#method-load_data}{\code{ClassificationCase$load_data()}}
\item \href{#method-normalize_data}{\code{ClassificationCase$normalize_data()}}
\item \href{#method-get_betas}{\code{ClassificationCase$get_betas()}}
\item \href{#method-impute_data}{\code{ClassificationCase$impute_data()}}
\item \href{#method-run_classification}{\code{ClassificationCase$run_classification()}}
\item \href{#method-prepare_cnv}{\code{ClassificationCase$prepare_cnv()}}
\item \href{#method-estimate_purity}{\code{ClassificationCase$estimate_purity()}}
\item \href{#method-run_workflow}{\code{ClassificationCase$run_workflow()}}
\item \href{#method-clone}{\code{ClassificationCase$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Create a new ClassificationCase instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$new(basename, path, verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{basename}}{Basename of sample.}

\item{\code{path}}{Input directory with IDAT files.}

\item{\code{verbose}}{Print informative messages (Default: TRUE).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `ClassificationCase` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate"></a>}}
\subsection{Method \code{validate()}}{
Perform input file checks. This is quite extensive actually. After checking whether
the input files exists, the data are read (to check for corrupt files) and the information
is futher used to investigate whether the files have the same no. of probes. In addition,
the array type is guessed based on the number of probes. If any of these steps should go wrong,
the program records an error code to help narrow down the problem.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$validate(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{Print informative messages (Boolean, default: TRUE).
Inherits from \code{\link{ClassificationCase$new}}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-terminate"></a>}}
\subsection{Method \code{terminate()}}{
Internal function to terminate processing and record error code.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$terminate(error_code)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{error_code}}{Error code encountered.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-load_data"></a>}}
\subsection{Method \code{load_data()}}{
Load data for sample
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$load_data(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{Print helpful messages (default: TRUE)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-normalize_data"></a>}}
\subsection{Method \code{normalize_data()}}{
Perform background normalization
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$normalize_data(preprocess_function = NULL, verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{preprocess_function}}{Function used for preprocessing of the data.
If NULL, will use minfi::preprocessIllumina() to perform background
intensity correction (Default: NULL)}

\item{\code{verbose}}{Print helpful messages (default: TRUE)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_betas"></a>}}
\subsection{Method \code{get_betas()}}{
Extract beta values from MethylSet object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$get_betas(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{Print helpful messages (default: TRUE)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-impute_data"></a>}}
\subsection{Method \code{impute_data()}}{
Perform missing data imputation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$impute_data(imputation_function = NULL, verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{imputation_function}}{Function used to perform imputation.
Has to be able to use matrix of beta values for a single sample
as input. If NULL, performs random data imputation (beta values
are to fill in gaps are sampled from available data, Default: NULL)}

\item{\code{verbose}}{Print helpful messages (Default: TRUE)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run_classification"></a>}}
\subsection{Method \code{run_classification()}}{
Classify tumor sample
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$run_classification(rf_object, verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rf_object}}{RandomForest predictor object}

\item{\code{verbose}}{Print helpful messages (default: TRUE)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prepare_cnv"></a>}}
\subsection{Method \code{prepare_cnv()}}{
Prepare copy-number plot
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$prepare_cnv(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{Print helpful messages (default: TRUE)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-estimate_purity"></a>}}
\subsection{Method \code{estimate_purity()}}{
Perform tumor purity estimation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$estimate_purity(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{Print helpful messages (default: TRUE)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run_workflow"></a>}}
\subsection{Method \code{run_workflow()}}{
Run full sample workflow
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$run_workflow(rf_object, verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rf_object}}{RandomForest predictor object. Passed to
run_classification()}

\item{\code{verbose}}{Print helpful messages (default: TRUE)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ClassificationCase$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
